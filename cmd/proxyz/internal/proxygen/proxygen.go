package proxygen

import (
	"bytes"
	"fmt"
	"go/build"
	"path"
	"path/filepath"
	"reflect"
	"sort"
	"strconv"
	"strings"
	"text/template"

	"golang.org/x/tools/go/packages"

	"github.com/roy2220/proxyz/cmd/proxyz/internal/methodset"
)

// ProxyGen ...
type ProxyGen struct {
	MethodSet         *methodset.MethodSet
	OutputPackagePath string
	OutputTypeName    string

	inputPackagePath      string
	outputPackageDirPath  string
	outputPackageID       string
	outputPackageName     string
	buffer                *bytes.Buffer
	packagePath2FormatArg map[string]string
}

// EmitProgram ...
func (pg *ProxyGen) EmitProgram() ([]byte, error) {
	pg.inputPackagePath = pg.MethodSet.PackagePath
	var err error
	pg.outputPackageDirPath, err = locatePackageDir(pg.OutputPackagePath)

	if err != nil {
		return nil, err
	}

	if pg.OutputPackagePath == pg.inputPackagePath {
		pg.outputPackageID, pg.outputPackageName = pg.inputPackageID(), pg.inputPackageName()
	} else {
		var err error
		pg.outputPackageID, pg.outputPackageName, err = findPackageIDAndName(pg.OutputPackagePath)

		if err != nil {
			return nil, err
		}

		if pg.outputPackageName == "" {
			pg.outputPackageName = path.Base(pg.outputPackageDirPath)
		}
	}

	if packageIDIsValidPackagePath(pg.inputPackageID()) {
		// to formal package path
		pg.inputPackagePath = pg.inputPackageID()
	}

	pg.buffer = bytes.NewBuffer(nil)
	pg.emitPackageClause()
	pg.emitImportDeclaration()
	pg.emitTypeDeclaration()
	pg.emitMethodDeclarations()
	return pg.buffer.Bytes(), nil
}

// OutputPackageDirPath ...
func (pg *ProxyGen) OutputPackageDirPath() string {
	return pg.outputPackageDirPath
}

func (pg *ProxyGen) emitPackageClause() {
	fmt.Fprintln(pg.buffer, "// Code generated by proxyz. DO NOT EDIT.")
	fmt.Fprintf(pg.buffer, "package %s\n", pg.outputPackageName)
}

func (pg *ProxyGen) emitImportDeclaration() {
	packageBasicInfos := []methodset.PackageBasicInfo{
		{Name: "proxyz", Path: "github.com/roy2220/proxyz"},
		{ID: pg.inputPackageID(), Name: pg.inputPackageName(), Path: pg.inputPackagePath},
	}

	for _, method := range pg.MethodSet.Methods {
		for _, argType := range method.ArgTypes {
			packageBasicInfos = append(packageBasicInfos, argType.PackageBasicInfos...)
		}

		for _, resultType := range method.ResultTypes {
			packageBasicInfos = append(packageBasicInfos, resultType.PackageBasicInfos...)
		}
	}

	packagePath2ImportName := map[string]string{}

	importNames := map[string]struct{}{
		pg.outputPackageName: {},
	}

	for _, packageBasicInfo := range packageBasicInfos {
		if packageBasicInfo.ID == pg.outputPackageID {
			continue
		}

		packageName, packagePath := packageBasicInfo.Name, packageBasicInfo.Path

		if _, ok := packagePath2ImportName[packagePath]; ok {
			continue
		}

		importName := packageName

		if _, ok := importNames[importName]; ok {
			for i := 1; ; i++ {
				importName = packageName + strconv.Itoa(i)

				if _, ok := importNames[importName]; !ok {
					break
				}
			}
		}

		packagePath2ImportName[packagePath] = importName
		importNames[importName] = struct{}{}
	}

	if len(packagePath2ImportName) == 0 {
		return
	}

	orderedPackagePaths := make([]string, len(packagePath2ImportName))
	i := 0

	for packagePath := range packagePath2ImportName {
		orderedPackagePaths[i] = packagePath
		i++
	}

	sort.Strings(orderedPackagePaths)
	fmt.Fprintln(pg.buffer, "")
	fmt.Fprintln(pg.buffer, "import (")

	for _, packagePath := range orderedPackagePaths {
		importName := packagePath2ImportName[packagePath]
		fmt.Fprintf(pg.buffer, "\t%s %q\n", importName, packagePath)
	}

	fmt.Fprintln(pg.buffer, ")")
	pg.packagePath2FormatArg = map[string]string{}

	for packagePath, importName := range packagePath2ImportName {
		pg.packagePath2FormatArg[packagePath] = importName + "."
	}
}

func (pg *ProxyGen) emitTypeDeclaration() {
	const text = `
type {{ $.TypeName }} struct {
	proxyz.XxxProxyBase
	{{ $.UnderlyingType }}
}

var _ = (proxyz.Proxy)((*{{ $.TypeName }})(nil))

func {{ $.NewFunctionName }}(underlying {{ $.UnderlyingType }}) *{{ $.TypeName }} {
	return &{{ $.TypeName }}{
		{{ $.UnderlyingTypeName }}: underlying,
	}
}
`
	var newFunctionName string

	if outputTypeName2 := capitalizeFirstLetter(pg.OutputTypeName); pg.OutputTypeName == outputTypeName2 {
		newFunctionName = "New" + pg.OutputTypeName
	} else {
		newFunctionName = "new" + outputTypeName2
	}

	data := struct {
		TypeName           string
		UnderlyingType     string
		UnderlyingTypeName string
		NewFunctionName    string
	}{
		TypeName:           pg.OutputTypeName,
		UnderlyingType:     pg.formatInputType(),
		UnderlyingTypeName: pg.inputTypeName(),
		NewFunctionName:    newFunctionName,
	}

	if err := template.Must(template.New("").Parse(text)).Execute(pg.buffer, data); err != nil {
		panic(err)
	}
}

func (pg *ProxyGen) emitMethodDeclarations() {
	orderedMethods := make([]methodset.Method, len(pg.MethodSet.Methods))
	copy(orderedMethods, pg.MethodSet.Methods)

	sort.Slice(orderedMethods, func(i, j int) bool {
		return orderedMethods[i].Name < orderedMethods[j].Name
	})

	for i, method := range orderedMethods {
		pg.emitMethodDeclaration(method, i)
	}

	const text = `
func (p *{{ $.TypeName }}) XxxGetMethodName(methodIndex int) string {
	return [...]string{
{{- range $i, $methodName := $.MethodNames }}
		{{ $.TypeName }}{{ $methodName }}: "{{ $methodName }}",
{{- end }}
	}[methodIndex]
}

func (p *{{ $.TypeName }}) XxxNumberOfMethods() int { return {{ len $.MethodNames }} }
func (p *{{ $.TypeName }}) XxxUnderlyingType() string { return "{{ $.UnderlyingTypeRepr }}" }
`
	methodNames := make([]string, len(orderedMethods))

	for i := range orderedMethods {
		methodNames[i] = orderedMethods[i].Name
	}

	data := struct {
		TypeName           string
		MethodNames        []string
		UnderlyingTypeRepr string
	}{
		TypeName:           pg.OutputTypeName,
		MethodNames:        methodNames,
		UnderlyingTypeRepr: pg.inputPackagePath + "." + pg.inputTypeName(),
	}

	if err := template.Must(template.New("").Parse(text)).Execute(pg.buffer, data); err != nil {
		panic(err)
	}
}

func (pg *ProxyGen) emitMethodDeclaration(method methodset.Method, methodIndex int) {
	funcMap := template.FuncMap{
		"last": func(i int, a interface{}) bool {
			return i == reflect.ValueOf(a).Len()-1
		},
	}

	const text = `
const {{ $.TypeName }}{{ $.MethodName }} = {{ $.MethodIndex }}

type {{ $.TypeName }}{{ $.MethodName }}Call struct {
{{- range $i, $argType := $.ArgTypes }}
	Arg{{ $i }}{{ " " }}
	{{- if and $.MethodIsVariadic (last $i $.ArgTypes) }}
		{{- "[]" }}
	{{- end }}
	{{- $argType }}
{{- end }}
{{- range $i, $resultType := $.ResultTypes }}
	Result{{ $i }} {{ $resultType }}
{{- end }}
{{- if or $.ArgTypes $.ResultTypes }}
{{ "" }}
{{- end }}
	callee {{ $.UnderlyingType }}
	interceptors []proxyz.MethodCallInterceptor
	nextInterceptorIndex int
}

var _ = (proxyz.MethodCall)((*{{ $.TypeName }}{{ $.MethodName }}Call)(nil))

func (mc *{{ $.TypeName }}{{ $.MethodName }}Call) Forward() {
	if interceptor, ok := mc.getNextInterceptor(); ok {
		interceptor(mc)
		return
	}

	{{ "" }}
{{- if $.ResultTypes }}
	{{- range $i, $_ := $.ResultTypes }}
		{{- if $i }}
			{{- ", " }}
		{{- end }}
		{{- "mc.Result" }}{{ $i }}
	{{- end }}
	{{- " = " }}
{{- end }}
{{- "mc.callee" }}.{{ $.MethodName }}(
{{- range $i, $_ := $.ArgTypes }}
	{{- if $i }}
		{{- ", " }}
	{{- end }}
	{{- "mc.Arg" }}{{ $i }}
	{{- if and $.MethodIsVariadic (last $i $.ArgTypes) }}
		{{- "..." }}
	{{- end }}
{{- end }}
{{- ")" }}
}

func (mc *{{ $.TypeName }}{{ $.MethodName }}Call) GetArg(argIndex int) interface{} {
	switch argIndex {
{{- range $i, $_ := $.ArgTypes }}
	case {{ $i }}:
		return mc.Arg{{ $i }}
{{- end }}
	default:
		panic("arg index out of range")
	}
}

func (mc *{{ $.TypeName }}{{ $.MethodName }}Call) SetArg(argIndex int, arg interface{}) {
	switch argIndex {
{{- range $i, $argType := $.ArgTypes }}
	case {{ $i }}:
		mc.Arg{{ $i }} = arg.(
	{{- if and $.MethodIsVariadic (last $i $.ArgTypes) }}
		{{- "[]" }}
	{{- end }}
	{{- $argType }}
	{{- ")"}}
{{- end }}
	default:
		panic("arg index out of range")
	}
}

func (mc *{{ $.TypeName }}{{ $.MethodName }}Call) GetResult(resultIndex int) interface{} {
	switch resultIndex {
{{- range $i, $_ := $.ResultTypes }}
	case {{ $i }}:
		return mc.Result{{ $i }}
{{- end }}
	default:
		panic("result index out of range")
	}
}

func (mc *{{ $.TypeName }}{{ $.MethodName }}Call) SetResult(resultIndex int, result interface{}) {
	switch resultIndex {
{{- range $i, $resultType := $.ResultTypes }}
	case {{ $i }}:
		mc.Result{{ $i }} = result.({{ $resultType }})
{{- end }}
	default:
		panic("result index out of range")
	}
}

func (mc *{{ $.TypeName }}{{ $.MethodName }}Call) MethodName() string { return "{{ $.MethodName }}" }
func (mc *{{ $.TypeName }}{{ $.MethodName }}Call) MethodIndex() int { return {{ $.TypeName }}{{ $.MethodName }} }
func (mc *{{ $.TypeName }}{{ $.MethodName }}Call) NumberOfArgs() int { return {{ len $.ArgTypes }} }
func (mc *{{ $.TypeName }}{{ $.MethodName }}Call) NumberOfResults() int { return {{ len $.ResultTypes }} }

func (mc *{{ $.TypeName }}{{ $.MethodName }}Call) getNextInterceptor() (proxyz.MethodCallInterceptor, bool) {
	if i := mc.nextInterceptorIndex; i < len(mc.interceptors) {
		mc.nextInterceptorIndex++
		return mc.interceptors[i], true
	}

	return nil, false
}

func (p *{{ $.TypeName }}) {{ $.MethodName }}(
{{- range $i, $argType := $.ArgTypes }}
	{{- if $i }}
		{{- ", " }}
	{{- end }}
	{{- index $.ArgNames $i }}{{ " " }}
	{{- if and $.MethodIsVariadic (last $i $.ArgTypes) }}
		{{- "..." }}
	{{- end }}
	{{- $argType }}
{{- end }}
{{- ")" }}
{{- if $.ResultTypes }}
	{{- " " }}
	{{- if ge (len $.ResultTypes) 2 }}
	{{- "(" }}
	{{- end }}
	{{- range $i, $resultType := $.ResultTypes }}
		{{- if $i }}
			{{- ", " }}
		{{- end }}
		{{- $resultType }}
	{{- end }}
	{{- if ge (len $.ResultTypes) 2 }}
	{{- ")" }}
	{{- end }}
{{- end }}
{{- " {" }}
	methodCallInterceptors := p.XxxGetMethodCallInterceptors({{ $.TypeName }}{{ $.MethodName }})

	if len(methodCallInterceptors) == 0 {
		{{ "" }}
{{- if $.ResultTypes }}
{{- "return " }}
{{- end }}
{{- "p." }}{{ $.UnderlyingTypeName }}.{{ $.MethodName }}(
{{- range $i, $_ := $.ArgTypes }}
	{{- if $i }}
		{{- ", " }}
	{{- end }}
	{{- index $.ArgNames $i }}
	{{- if and $.MethodIsVariadic (last $i $.ArgTypes) }}
		{{- "..." }}
	{{- end }}
{{- end }}
{{- ")" }}
	}

	methodCall := {{ $.TypeName }}{{ $.MethodName }}Call{
{{- range $i, $_ := $.ArgTypes }}
		Arg{{ $i }}: {{ index $.ArgNames $i }},
{{- end }}
{{- if $.ArgTypes }}
{{ "" }}
{{- end }}
		callee: p.{{ $.UnderlyingTypeName }},
		interceptors: methodCallInterceptors,
	}

	methodCall.Forward()
{{- if $.ResultTypes }}
	{{ "return " }}
	{{- range $i, $_ := $.ResultTypes }}
		{{- if $i }}
			{{- ", " }}
		{{- end }}
		{{- "methodCall.Result" }}{{ $i }}
	{{- end }}
{{- end }}
}
`

	argNames := make([]string, len(method.ArgTypes))
	copy(argNames, method.ArgNames)

	for i, argName := range argNames {
		switch argName {
		case "", "_":
			argNames[i] = "arg" + strconv.Itoa(i)
		default:
			argNames[i] = "_" + argName + "_"
		}
	}

	argTypes := make([]string, len(method.ArgTypes))

	for i, argType := range method.ArgTypes {
		argTypes[i] = pg.formatType(argType)
	}

	resultTypes := make([]string, len(method.ResultTypes))

	for i, resultType := range method.ResultTypes {
		resultTypes[i] = pg.formatType(resultType)
	}

	data := struct {
		TypeName           string
		UnderlyingType     string
		UnderlyingTypeName string
		MethodName         string
		MethodIsVariadic   bool
		MethodIndex        int
		ArgNames           []string
		ArgTypes           []string
		ResultTypes        []string
	}{
		TypeName:           pg.OutputTypeName,
		UnderlyingType:     pg.formatInputType(),
		UnderlyingTypeName: pg.inputTypeName(),
		MethodName:         method.Name,
		MethodIsVariadic:   method.IsVariadic,
		MethodIndex:        methodIndex,
		ArgNames:           argNames,
		ArgTypes:           argTypes,
		ResultTypes:        resultTypes,
	}

	if err := template.Must(template.New("").Funcs(funcMap).Parse(text)).Execute(pg.buffer, data); err != nil {
		panic(err)
	}
}

func (pg *ProxyGen) formatType(type1 methodset.Type) string {
	formatArgs := make([]interface{}, len(type1.PackageBasicInfos))

	for i, packageBasicInfo := range type1.PackageBasicInfos {
		formatArgs[i] = pg.formatArg(packageBasicInfo.Path)
	}

	return fmt.Sprintf(type1.Format, formatArgs...)
}

func (pg *ProxyGen) formatInputType() string {
	var prefix string

	if pg.MethodSet.TypeIsInterface {
		prefix = ""
	} else {
		prefix = "*"
	}

	return fmt.Sprintf("%s%s%s", prefix, pg.formatArg(pg.inputPackagePath), pg.inputTypeName())
}

func (pg *ProxyGen) inputPackageID() string {
	return pg.MethodSet.PackageID
}

func (pg *ProxyGen) inputPackageName() string {
	return pg.MethodSet.PackageName
}

func (pg *ProxyGen) inputTypeName() string {
	return pg.MethodSet.TypeName
}

func (pg *ProxyGen) formatArg(packagePath string) string {
	return pg.packagePath2FormatArg[packagePath]
}

func findPackageIDAndName(packagePath string) (string, string, error) {
	rawPackages, err := packages.Load(&packages.Config{
		Mode: packages.NeedName,
	}, packagePath)

	if err != nil {
		return "", "", fmt.Errorf("proxygen: package load failed; packagePath=%q: %v", packagePath, err)
	}

	if n := len(rawPackages); n != 1 {
		var err error

		if n == 0 {
			err = fmt.Errorf("proxygen: no package found; packagePath=%q", packagePath)
		} else {
			err = fmt.Errorf("proxygen: multiple packages found; packagePath=%q", packagePath)
		}

		return "", "", err
	}

	rawPackage := rawPackages[0]
	return rawPackage.ID, rawPackage.Name, nil
}

func locatePackageDir(packagePath string) (string, error) {
	rawPackage, err := build.Import(packagePath, ".", build.FindOnly)

	if err != nil {
		return "", fmt.Errorf("proxygen: package import failed; packagePath=%q: %v", packagePath, err)
	}

	packageDirPath, err := filepath.Abs(rawPackage.Dir)

	if err != nil {
		return "", fmt.Errorf("proxygen: absolute path fetch failed; path=%q: %v", rawPackage.Dir, err)
	}

	return packageDirPath, nil
}

func packageIDIsValidPackagePath(packageID string) bool {
	if strings.HasPrefix(packageID, "_/") {
		return false
	}

	s := packageID

	for {
		const vendorStr = "vendor"
		i := strings.Index(s, vendorStr)

		if i < 0 {
			return true
		}

		j := i + len(vendorStr)

		if i >= 1 && s[i-1] != '/' {
			s = s[j:]
			continue
		}

		if j < len(s) && s[j] != '/' {
			s = s[j:]
			continue
		}

		return false
	}
}

func capitalizeFirstLetter(word string) string {
	if c := word[0]; c >= 'a' && c <= 'z' {
		return string('A'+(c-'a')) + word[1:]
	}

	return word
}
